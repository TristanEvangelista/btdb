import java.util.*;
import java.io.*;


//java -Xmx32M btdb Data.bt Data.values
//BTree visualization, see which one it promotes for even number in splitting

public class btdb{
	
	public final static int MaxChildrenNodes = 4;	
	public final static int MaxKeys = MaxChildrenNodes-1;
	
	private static RandomAccessFile valuesFile;
	//BTree stuff
	private static RandomAccessFile btFile;
	public static long numberOfNodes = 1;
	public static int maxInList = (3*MaxChildrenNodes)-1;
	
	//Byte stuff
	public final static int MaxByteSizeValueRecord = 258;
	public final static int ByteSizeHeader = 8;
	public static long offsetInitialBytes = ByteSizeHeader*2;
	public static long nodeLengthBytes = maxInList * 8;
	
	public static void main(String args[])throws IOException{
    	Scanner in = new Scanner(System.in);
		String ignoredString = "";
		String bt = args[0];
		String values = args[1];
		File newbtFile = new File(bt);
		File newvaluesFile = new File(values);
		if(newbtFile.exists()){
			btFile = new RandomAccessFile(bt,"rwd");
			
		} else {
			btFile = new RandomAccessFile(bt,"rwd");
			
		}
		if(newvaluesFile.exists()){
			valuesFile = new RandomAccessFile(values,"rwd");
			
		} else {
			valuesFile = new RandomAccessFile(values,"rwd");
			
		}
		
		//Beginning of values file
		long numberOfRecords = 0;
		long recordPlace = 0;
		long valueRecordNumber = 0;
		valuesFile.seek(0);
		valuesFile.writeLong(numberOfRecords);
		
		//Initialize BTree variables
			//byte stuff
		long maxByteSizeBTData = maxInList*ByteSizeHeader;
			//other stuff
		long locationOfRootNode = 0;
		
		//Updates the number of Nodes
		btFile.seek(0);
		btFile.writeLong(numberOfNodes);
		
		//Updates the location of the root Node
		btFile.seek(ByteSizeHeader);
		btFile.writeLong(locationOfRootNode);
		
		Node rootNode = new Node(0); 
		writeToNode(rootNode);
		printBT();
		
		while(in.hasNext()){
			String command = in.next();
			if(command.equals("insert") || command.equals("update") || command.equals("select") || command.equals("exit")){
				if(command.equals("insert")){
					long insertKey = Integer.parseInt(in.next());
					String valueString = in.nextLine();
					
					//check if key exists already
					long checkInsertKey = searchNodes(insertKey, locationOfRootNode);
					if(checkInsertKey != -1){
						System.out.println("ERROR: " + insertKey + " already exists.");
						continue;
					}
					//updates BTree
					insert(insertKey, locationOfRootNode, numberOfRecords);					
					//Writes Header into the BTree file
					
					//Updates BTFile
					locationOfRootNode = findRoot();
					btFile.seek(ByteSizeHeader);
					btFile.writeLong(locationOfRootNode);
					
					//Writes into the valuesFile
					byte[] valueByteArray = valueString.getBytes("UTF8");
					int stringLengthOfBytes = valueByteArray.length;
					valuesFile.seek(ByteSizeHeader + numberOfRecords*MaxByteSizeValueRecord);
					valuesFile.writeShort(stringLengthOfBytes);
					valuesFile.write(valueString.getBytes("UTF8"));
					
					//Updates the header of valuesFile
					numberOfRecords++;
					valuesFile.seek(0);
					valuesFile.writeLong(numberOfRecords);
					System.out.println(insertKey + " inserted.");
					
					//print BTree
					printBT();
				}
				
				if(command.equals("update")){
					long updateKey = Integer.parseInt(in.next());
					String valueString = in.nextLine();
					
					//Check if key doesn't exist
					if(searchNodes(updateKey, locationOfRootNode) == -1){
						System.out.println("ERROR: " + updateKey + " does not exist.");
						continue;
					}
					
					//Use key to find place in BTree	
					valueRecordNumber = searchNodes(updateKey, locationOfRootNode);
					btFile.seek(valueRecordNumber);
					
					//Writes into the valuesFile
					byte[] valueByteArray = valueString.getBytes("UTF8");
					int stringLengthOfBytes = valueByteArray.length;
					recordPlace = (ByteSizeHeader + valueRecordNumber*MaxByteSizeValueRecord);
					valuesFile.seek(recordPlace);
					valuesFile.writeShort(stringLengthOfBytes);
					valuesFile.write(valueString.getBytes("UTF8"));
				}
				
				if(command.equals("select")){
					long selectKey = Integer.parseInt(in.next());
					
					//Check if key doesn't exist
					if(searchNodes(selectKey, locationOfRootNode) == -1){
						ignoredString = in.nextLine();
						System.out.println("ERROR: " + selectKey + " does not exist.");
						continue;
					}
					
					//find the proper place using the key and BTree
					valueRecordNumber = searchNodes(selectKey, locationOfRootNode);
					
					//finds inside valuesFile
					recordPlace = (ByteSizeHeader + valueRecordNumber*MaxByteSizeValueRecord);
					System.out.println(recordPlace);
					valuesFile.seek(recordPlace);
					int stringLengthOfBytes = valuesFile.readShort(); 
					System.out.println(stringLengthOfBytes);
					byte[] valueByteArray = new byte[stringLengthOfBytes];
					int valueByteArrayRead = valuesFile.read(valueByteArray);
					String valueString = new String(valueByteArray, "UTF-8");
					System.out.println(selectKey + " =>" + valueString);
				}
				if(command.equals("exit")){
					break;
				}
			}else{
				ignoredString = in.nextLine();
				System.out.println("ERROR: invalid command");
			}
		} //end of while loop for inputs
	}
	//method for inserting
	public static void insert(long key, long position, long offset) throws IOException{
		System.out.println("insert() " + "key: " + key + " position: " + position + " offset: " + offset );
		Node temp = readNode(position);
		long MaxKeysLast = temp.nodeKeys[MaxKeys-1];
		if(temp != null){
			System.out.println("MaxKeysLast " + MaxKeysLast);
			if(MaxKeysLast != -1){
				System.out.println("split");
				split(temp);
				btFile.seek(0);
				btFile.writeLong(numberOfNodes);
				position = findRoot();
				temp = readNode(position);
			}
		}
		if(temp.isLeaf()){
			temp.insertKey(key, offset);
		} else {
			long newPosition = temp.getChild(key);
			System.out.println("newPosition " + newPosition);
			insert(key, newPosition, offset);
		}
		writeToNode(temp);
    }
	//method for writing
	private static void writeToNode(Node node) throws IOException{
		System.out.println("writeToNode() " + "nodeID: " + node.nodeID);		
		btFile.seek(offsetInitialBytes + node.nodeID * nodeLengthBytes);
		btFile.writeLong(node.parentID);
		for(int i = 0; i < MaxChildrenNodes; i++){
			btFile.writeLong(node.childrenIDs[i]);
			if(i < MaxKeys){
				btFile.writeLong(node.nodeKeys[i]);
				btFile.writeLong(node.offsetOfValues[i]);
			}
		}
    }
	//method for searching
	public static long searchNodes(long key, long position) throws IOException{
		System.out.println("searchNodes() " + "key: " + key + " position: " + position);		
		Node seeker = readNode(position);
		long newPosition;
		for(int i = 0; i < MaxKeys; i++){
			if(seeker.nodeKeys[i] == key){
				System.out.println(seeker.offsetOfValues[i]);
				return seeker.offsetOfValues[i];    
			}
			else if(seeker.nodeKeys[i] > key && seeker.childrenIDs[i] != -1){
				newPosition = seeker.childrenIDs[i]; seeker = null;
				return searchNodes(key, newPosition);
			}
			else if(seeker.nodeKeys[i] < key && seeker.childrenIDs[i] != -1){
				newPosition = seeker.childrenIDs[i]; seeker = null;
				return searchNodes(key, newPosition);
			}
		}
		return -1;
    }
	//method for reading
	private static Node readNode(long position) throws IOException{
		System.out.println("readNode() " + " position: " + position);
		btFile.seek(offsetInitialBytes + position * nodeLengthBytes);
		Node toRead = new Node(position);
		toRead.parentID = btFile.readLong();
		for(int i = 0; i < MaxChildrenNodes; i++){
			toRead.childrenIDs[i] = btFile.readLong();
			if(i != MaxKeys){
				toRead.nodeKeys[i] = btFile.readLong();
				toRead.offsetOfValues[i] = btFile.readLong();
			}
		}
		return toRead;
    }
	
	//methed for splitting
	private static void split(Node node) throws IOException{
		if(node.parentID == -1){
			Node y = new Node(numberOfNodes); 
			numberOfNodes++; 
			Node root = new Node(numberOfNodes); 
			numberOfNodes++;
			node.transfer(root, y);
			node.parentID = root.nodeID;
			y.parentID = root.nodeID;
			root.addChild(node.nodeID);
			root.addChild(y.nodeID);
			writeToNode(node); 
			writeToNode(y); 
			writeToNode(root);
			btFile.seek(ByteSizeHeader); 
			btFile.writeLong(root.nodeID);
			System.out.println("rootID: " + root.nodeID);
			node = null; 
			y = null; 
			root = null; 
		}else{
			Node ancestor = readNode(node.parentID); 
			Node y = new Node(numberOfNodes); numberOfNodes++;
			node.transfer(ancestor, y); 
			ancestor.addChild(y.nodeID); 
			y.parentID = ancestor.nodeID;
			attach(y);
			writeToNode(y); 
			writeToNode(node);
			if(ancestor.nodeKeys[MaxKeys] != - 1){
				split(ancestor);    
			}
			writeToNode(ancestor);
		}
    }
    private static void attach(Node ancestor) throws IOException{
		for(int i = 0; i < MaxKeys / 2; i++){
			if(ancestor.childrenIDs[i] == - 1){
				break;    
			}
			btFile.seek(offsetInitialBytes + ancestor.childrenIDs[i] * nodeLengthBytes); 
			btFile.writeLong(ancestor.nodeID);
		}
    }    
	public static long findRoot()throws IOException{
		btFile.seek(ByteSizeHeader);
		return btFile.readLong();
	}	
	
	public static void printNode(Node node){
		System.out.print(node.nodeID);
		System.out.print("(" + node.parentID + ", ");
		for(int i = 0; i < MaxChildrenNodes; i++){
			if (i == MaxKeys){
				System.out.print(node.childrenIDs[i] + ")" + "\n");
			} else {
				System.out.print(node.childrenIDs[i] + ", ");
				System.out.print(node.nodeKeys[i] + ", ");
				System.out.print(node.offsetOfValues[i] + ", ");
			}
		}		
	}
	
	public static void printBT()throws IOException{
		btFile.seek(0);
		long numberOfRecordsNew = btFile.readLong();
		System.out.print(numberOfRecordsNew);
		btFile.seek(ByteSizeHeader);
		System.out.print(btFile.readLong());
		for(int i = 0; i < numberOfRecordsNew; i++){
			btFile.seek(offsetInitialBytes + i * nodeLengthBytes);
			System.out.print("(" + btFile.readLong() + ", ");
			for(int j = 0; j < MaxChildrenNodes; j++){
				if (j == MaxKeys){
					System.out.print(btFile.readLong() + ")" + "\n");
				} else {
					System.out.print(btFile.readLong() + ", ");
					System.out.print(btFile.readLong() + ", ");
					System.out.print(btFile.readLong() + ", ");
				}
			}
		}
	}
	
	
	
}

class Node{
	private final int MaxChildrenNodes = 4;
	private final int MaxKeys = MaxChildrenNodes-1;
	public long nodeID;
	public long parentID = -1;
	public long[] childrenIDs = new long[MaxChildrenNodes];
	public long[] nodeKeys = new long[MaxKeys];
	public long[] offsetOfValues = new long[MaxKeys];
	
	public Node(long NodeNumber){
		this.nodeID = NodeNumber;
		Arrays.fill(nodeKeys, -1);
		Arrays.fill(childrenIDs, -1);
		Arrays.fill(offsetOfValues, -1);
	}
	
	public boolean isLeaf(){
		if(childrenIDs[0] == -1){
			return true;
		}
		return false;
	}
	
	public void addChild(long position){
		System.out.println("addChild() " + " position: " + position);
		for(int i = 0; i < MaxChildrenNodes; i++){
			if(childrenIDs[i] == -1){
				childrenIDs[i] = position;
				break;
			}
		}
	}
	
	public long getChild(long key){
		System.out.println("getChild() " + " child: " + key);
		long ID = -1;
		for(int i = 0; i < MaxKeys; i++){
			System.out.println(nodeKeys[i]);
			if(key < nodeKeys[i] && i == 0){
				return childrenIDs[i];
			}
			else if((key > nodeKeys[i] && key < nodeKeys[i+1]) || nodeKeys[i+1] == -1){
				return childrenIDs[i+1];
			}
			else if(key > nodeKeys[i] && i == (MaxKeys-1)){
				return childrenIDs[i+1];
			}
	    }
		return ID;
	}
	
	public void insertKey(long key, long offset){
		System.out.println("insertKey() " + " key: " + key + " offset: " + offset);
	    for(int i = MaxKeys - 1; i >= 0; i--){
			if(nodeKeys[i] == -1){
				if(i == 0){
					nodeKeys[i] = key;  
					offsetOfValues[i] = offset;
				}
				else if(nodeKeys[i-1] != -1 && nodeKeys[i-1] < key){
					nodeKeys[i] = key;
					offsetOfValues[i] = offset;
				}
			}
			if(key < nodeKeys[i]){
				nodeKeys[i + 1] = nodeKeys[i];
				offsetOfValues[i + 1] = offsetOfValues[i];
				childrenIDs[i + 1] =  childrenIDs[i];
				nodeKeys[i] = -1;
				offsetOfValues[i] = -1;
				childrenIDs[i] = -1;
				if(i == 0){
					nodeKeys[i] = key;
					offsetOfValues[i] = offset;
					childrenIDs[i] = -1;
				} else if(nodeKeys[i-1] != -1 && nodeKeys[i-1] < key){
					nodeKeys[i] = key;
					offsetOfValues[i] = offset;
					childrenIDs[i] = -1;
				}
			} //else {
				//nodeKeys[i] = key;
				//offsetOfValues[i] = offset;
				//childrenIDs[i + 2] = -1; 
			//}
	    }
    }
	public void transfer(Node parent, Node offspring){
		System.out.println("transfer() " + " parent: " + parent.nodeID + " offspring: " + offspring.nodeID);
		parent.insertKey(nodeKeys[MaxKeys / 2], offsetOfValues[MaxKeys / 2]); 
		nodeKeys[MaxKeys / 2] = -1; 
		offsetOfValues[MaxKeys / 2] = -1; 
		for(int i = MaxKeys / 2; i < MaxChildrenNodes; i++){
			offspring.addChild(childrenIDs[i]);
			childrenIDs[i] = -1;
			if(i < MaxKeys){
				offspring.insertKey(nodeKeys[i], offsetOfValues[i]);
				nodeKeys[i] = -1;
				offsetOfValues[i] = -1;
			}
		}
    }
}
